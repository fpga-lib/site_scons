#-------------------------------------------------------------------------------
#
#    Block Design Target Support for Xilinx Vivado SCons Tool
#
#    Author: Harry E. Zhurov
#
#-------------------------------------------------------------------------------

import os

from utils import *

#-------------------------------------------------------------------------------
def bd_create_script(env, trg, bd_config_path):
    
    bd_name       = get_name(trg)
    script_path   = os.path.join(env['BD_OOC_PATH'], env['BD_SCRIPT_DIRNAME'], bd_name + '.' + env['TOOL_SCRIPT_SUFFIX'])
        
    title_text =\
    'Block design "' + bd_name + '" create script' + os.linesep*2 + \
    'This file is automatically generated. Do not edit the file manually.'
    
    text  = 'set PROJECT_NAME   ' + bd_name                                                             + os.linesep
    text += 'set TOP_NAME       ' + bd_name                                                             + os.linesep
    text += 'set DEVICE         ' + env['DEVICE']                                                       + os.linesep
    text += 'set BUILD_SRC_DIR  ' + env['BUILD_SRC_PATH']                                               + os.linesep
    text += 'set SIM_SCRIPT_DIR ' + env['SIM_SCRIPT_PATH']                                              + os.linesep*2
                                                                                                        
    text += 'create_project -f ${PROJECT_NAME}.xpr . '                                                  + os.linesep
    text += 'set_property part  ${DEVICE} [current_project]'                                            + os.linesep
    text += 'set_property top ${TOP_NAME} [get_filesets sources_1]'                                     + os.linesep*2
                                                                                                        
    text += 'set bd_name    {' + bd_name + '}'                                                          + os.linesep
    text += 'set bd_path    {' + os.path.abspath(trg) + '}'                                             + os.linesep
    text += 'set bd_wrapper ${PROJECT_NAME}.gen/sources_1/bd/${bd_name}/hdl/${bd_name}_wrapper.v'       + os.linesep*2
                                                                                                        
    text += 'puts ""'                                                                                   + os.linesep
    text += 'puts "======== Create block design \\\"$bd_name\\\" ========"  '                           + os.linesep
                                                                                                        
    text += 'create_bd_design "${bd_name}"'                                                             + os.linesep
    text += 'open_bd_design ${bd_path}'                                                                 + os.linesep*2

    text += 'source {' + os.path.abspath(bd_config_path) + '}'                                          + os.linesep*2
    
    text += 'validate_bd_design'                                                                        + os.linesep
    text += 'make_wrapper -files [get_files ${bd_path}] -top'                                           + os.linesep
    text += 'add_files -norecurse ${bd_wrapper}'                                                        + os.linesep
    text += 'update_compile_order -fileset sources_1'                                                   + os.linesep*2

    text += 'puts ""'                                                                                   + os.linesep
    text += 'puts "-------- Export simulation for \\\"$bd_name\\\" --------"'                           + os.linesep
    text += 'set_property top ${bd_name}_wrapper [get_filesets sim_1]'                                  + os.linesep
    text += 'generate_target simulation [get_files ${bd_path}] -force'                                  + os.linesep
    text += 'export_simulation -of_objects [get_files ${bd_wrapper}]' + \
            ' -simulator questa -absolute_path -force -directory ${SIM_SCRIPT_DIR}/${bd_name}'          + os.linesep
    
    out = generate_title(title_text, '#')
    out += text
    out += generate_footer('#')

    create_dirs( [os.path.dirname(script_path)])
    with open(script_path, 'w') as ofile:
        ofile.write(out)
    
    return script_path

#-------------------------------------------------------------------------------
#
#    Action functions
#
#---------------------------------------------------------------------
#
#    Build Tcl script to create OOC IP
#
def bd_ooc_create(target, source, env):

    src = source[0]
    trg = target[0]

    src_path = str(src)
    trg_path = str(trg)
    
    trg_base_path = os.path.join(env['BD_OOC_PATH'], get_name(src_path)) 

    print(trg_base_path)
    
    print_action('create block design:       \'' + trg.name + '\'')
 
    script = bd_create_script(env, trg_path, src_path)
       
    Execute( Delete(trg_base_path) )
    Execute( Mkdir(trg_base_path) )
    
    logfile  = os.path.join(trg_base_path, 'create.log')
    cmd = []
    cmd.append(env['SYNCOM'])
    cmd.append(env['SYNFLAGS'])
    cmd.append('-log ' + logfile)
    cmd.append(' -source ' + script)
    cmd = ' '.join(cmd)

    if env['VERBOSE']:
        print(cmd)

    rcode = pexec(cmd, trg_base_path, exec_env=env['ENV'])

    return rcode
    
#-------------------------------------------------------------------------------
def create_ooc_bd(env, src):
    
    res = []
    bd_wrappers = []
    
    for s in src:
        source  = os.path.abspath(s)
        bd_name = get_name(s)
        target  = os.path.join(env['BD_OOC_PATH'], bd_name, bd_name + '.srcs', 'sources_1', 'bd', bd_name, bd_name + '.' + env['BD_SUFFIX'])
        res.append( env.BdCreate(target, source) )
        wname = os.path.join( env['BD_OOC_PATH'], bd_name, bd_name + '.gen', 'sources_1', 'bd', bd_name, 'hdl', bd_name + '_wrapper.v' )
        bd_wrappers.append(Glob(wname))
        
    env['BD_WRAPPERS'] = bd_wrappers
        
    return res
    
#-------------------------------------------------------------------------------

