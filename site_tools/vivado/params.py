#-------------------------------------------------------------------------------
#
#    Parameters Target Support for Xilinx Vivado SCons Tool
#
#    Author: Harry E. Zhurov
#
#-------------------------------------------------------------------------------

import os

from utils import *

#-------------------------------------------------------------------------------
#
#    Create Configuration Parameters header
#
def generate_hdl_header(guard_name : str) -> str:
    guard  = 'GUARD_' + guard_name.upper() + '_SVH'
    text   = generate_title('This file is automatically generated. Do not edit the file!', '//')
    text  += '`ifndef ' + guard + os.linesep
    text  += '`define ' + guard + os.linesep*2

    text  += '// synopsys translate_off' + os.linesep
    text  += '`ifndef SIMULATOR'         + os.linesep
    text  += '`define SIMULATOR'         + os.linesep
    text  += '`endif // SIMULATOR'       + os.linesep
    text  += '// synopsys translate_on'  + os.linesep*2
    
    return guard, text
#---------------------------------------------------------------------
def cfg_params_header(target, source, env):

    trg      = target[0]
    trg_path = str(trg)
    trg_name = get_name(trg.name)
    pkg_name = trg_name + '_pkg'
    
    print_action('create cfg params headers: \'' + trg.name + ', ' + pkg_name + '.svh\'' )
    params = {}
    params_pkg = {}
    for src in source:
        try:
            cfg_params = read_config(str(src))
            
        except SearchFileException as e:
            print_error('E: ' + e.msg)
            print_error('    while running "CreateCfgParamsHeader" builder')
            Exit(-1)
        
        params.update( prefix_suffix(str(src), cfg_params) )

    guard_name_def, text = generate_hdl_header(trg_name)
    
    #-----------------------------------------------------------------
    #
    #    Define section
    #
    max_len = max_str_len(params.keys()) + 2
    for p in params:
        value  = str(params[p])
        if value != '__NO_DEFINE__':
            text += '`define ' + p + ' '*(max_len - len(p)) + value + os.linesep

    text += os.linesep
    text_def = text

    #-----------------------------------------------------------------
    #
    #    Package section
    #
    guard_name_pkg, text = generate_hdl_header(pkg_name)
    max_len   = max_str_len(params.keys()) + 2
    val_types = [type(i) for i in params.values()]
    nalign    = [4, 3] if str in val_types else [2, 1] if float in val_types else [1]
    
    text += 'package ' + pkg_name + ';' + os.linesep*2
    for p in params:
        value = params[p]
        
        if isinstance(value, int):
            type_spec = 'int' + ' '*nalign[0]
            qmark     = ''
        elif isinstance(value, float):
            type_spec = 'real' + ' '*nalign[1]
            qmark     = ''
        elif isinstance(value, str):
            type_spec = 'string '
            qmark     = '"' if '"' not in value else ''
        else:
            print_error('E: unsupported parameter type: ' + str(type(value)) )
            print_error('    Supported parameter types: int, float, str')
            Exit(-1)
            
        if value != '__NO_DEFINE__':
            text += '    localparam ' + type_spec + p + ' '*(max_len - len(p)) + ' = ' + \
            qmark + str(value) + qmark + ';' + os.linesep
                
    text += os.linesep + 'endpackage : ' + pkg_name + '_pkg' + os.linesep
    #-----------------------------------------------------------------
    
    footer_def  = os.linesep + '`endif // ' + guard_name_def + os.linesep
    footer_pkg  = os.linesep + '`endif // ' + guard_name_pkg + os.linesep
    
    text_def += footer_def
    text     += footer_pkg

    trg_pkg_path = trg_path.replace(trg_name, pkg_name)
    
    with open(trg_path, 'w') as ofile:
        ofile.write(text_def)
        
    print(trg_pkg_path)        
    with open(trg_pkg_path, 'w') as ofile:
        ofile.write(text)

    return None

#-------------------------------------------------------------------------------
#
#    Create Configuration Parameters Tcl
#
def cfg_params_tcl(target, source, env):

    trg      = target[0]
    trg_path = str(trg)

    print_action('create cfg params tcl:     \'' + trg.name + '\'')
    params = {}
    for src in source:
        try:
            cfg_params = read_config(str(src))

        except SearchFileException as e:
            print_error('E: ' + e.msg)
            print_error('    while running "CreateCfgParamsTcl" builder')
            Exit(-1)
                
        cfg_params = prefix_suffix(str(src), cfg_params)
        params.update(cfg_params)

    max_len = max_str_len(params.keys()) + 2

    text  = generate_title('This file is automatically generated. Do not edit the file!', '#')
    for p in params:
        value = str(params[p])
        if not value:
            value = '""'
        text += 'set ' + p + ' '*(max_len - len(p)) + value + os.linesep

    text += generate_footer('#')

    with open(trg_path, 'w') as ofile:
        ofile.write(text)

    return None

#-------------------------------------------------------------------------------
def create_cfg_params_header(env, trg, src):

    if not SCons.Util.is_List(src):
        src = src.split()
    source = []
    for s in src:
        try:
            ss = os.path.abspath(search_file(s))
        except SearchFileException as e:
            print_error('E: ' + e.msg)
            print_error('    while running "CreateCfgParamsHeader" builder')
            Exit(-1)
            
        source.append(ss)

    env.CfgParamsHeader(trg, source)

    return trg

#-------------------------------------------------------------------------------
def create_cfg_params_tcl(env, trg, src):

    if not SCons.Util.is_List(src):
        src = src.split()
    source = []
    for s in src:
        try:
            ss = os.path.abspath(search_file(s))
        except SearchFileException as e:
            print_error('E: ' + e.msg)
            print_error('    while running "CreateCfgParamsTcl" builder')
            Exit(-1)
            
        source.append(ss)

    env.CfgParamsTcl(trg, source)

    return trg

#-------------------------------------------------------------------------------

