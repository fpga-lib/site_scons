#-------------------------------------------------------------------------------
#
#    IP Core Target Support for Xilinx Vivado SCons Tool
#
#    Author: Harry E. Zhurov
#
#-------------------------------------------------------------------------------

import os

from utils import *

#-------------------------------------------------------------------------------
#
#    Action functions
#
#---------------------------------------------------------------------
#
#    Build Tcl script to create OOC IP
#
def ip_create_script(target, source, env):

    src = source[0]
    trg = target[0]

    src_path = str(src)
    trg_path = str(trg)

    print_action('generate script:           \'' + trg.name + '\'')

    param_sect = 'config'

    ip_name = drop_suffix(src.name)
    try:
        ip_cfg = read_ip_config(src_path, param_sect)
        
    except SearchFileException as e:
        print_error('E: ' + e.msg)
        print_error('    while running "IpCreateScripts" builder')
        Exit(-1)

    title_text =\
    'IP core "' + ip_name + '" create script' + os.linesep*2 + \
    'This file is automatically generated. Do not edit the file manually,' + os.linesep + \
    'change parameters of IP in corresponing configuration file (cfg/ip/<IP name>)'

    text  = 'set ip_name    ' + ip_name                                   + os.linesep
    text += 'set DEVICE     ' + env['DEVICE']                             + os.linesep
    text += 'set IP_OOC_DIR ' + os.path.join(env['IP_OOC_PATH'], ip_name) + os.linesep*2
    text += 'set_part  ${DEVICE}'                                         + os.linesep
    text += 'create_ip -name ' + ip_cfg['type']
    text += ' -vendor xilinx.com'
    text += ' -library ip'
    text += ' -module_name ${ip_name}'
    text += ' -dir ${IP_OOC_DIR}'                                         + os.linesep*2

    ip_params  = ip_cfg[param_sect]
    max_pn_len = max_str_len(ip_params.keys())

    text += 'set_property -dict {' + os.linesep

    for p in ip_params:
        v = str(ip_params[p])
        if v == 'True' or v == 'False':
            v =  v.lower()
        v = '{' + v + '}'
        name_len      = len(p)
        value_len     = len(v)
        name_padding  = len(param_sect) + max_pn_len - name_len + 2
        line  = ' '*4 + param_sect + '.' + p + ' '*name_padding + v

        text += line + os.linesep

    text += '} [get_ips ${ip_name}]' + os.linesep

    text += os.linesep
    text += 'generate_target all [get_ips  ${ip_name}]'              + os.linesep
    text += 'export_simulation -of_objects [get_ips ${ip_name}] -simulator questa -absolute_path -force '
    text += '-directory ' + env['SIM_SCRIPT_PATH'] + os.linesep
    text += 'exit'

    out = generate_title(title_text, '#')
    out += text
    out += generate_footer('#')

    with open(trg_path, 'w') as ofile:
        ofile.write(out)

    return None
#---------------------------------------------------------------------
#
#    Build Tcl script to synthesize OOC IP
#
def ip_syn_script(target, source, env):

    src = source[0]
    trg = target[0]

    src_path = str(src)
    trg_path = str(trg)

    print_action('generate script:           \'' + trg.name + '\'')

    ip_name = drop_suffix(src.name)
    out_dir = os.path.join(env['IP_OOC_PATH'], ip_name)
    
    title_text =\
    'IP core "' + ip_name + '" synthesize script' + os.linesep*2 + \
    'This file is automatically generated. Do not edit the file manually,' + os.linesep + \
    'change parameters of IP in corresponing configuration file (cfg/ip/<IP name>)'

    text  = 'set ip_name    ' + ip_name                                     + os.linesep
    text += 'set DEVICE     ' + env['DEVICE']                               + os.linesep
    text += 'set IP_OOC_DIR ' + env['IP_OOC_PATH']                          + os.linesep
    text += 'set OUT_DIR    '  + out_dir                                    + os.linesep*2
    text += 'set_part  ${DEVICE}'                                           + os.linesep

    if env['VIVADO_PROJECT_MODE']:
        text += 'create_project -force managed_ip_project '
        text += '${OUT_DIR}/ip_managed_project -p ${DEVICE} -ip'            + os.linesep

    text += 'read_ip   [file join ${IP_OOC_DIR} '
    text += '${ip_name} ${ip_name} ${ip_name}.' + env['IP_CORE_SUFFIX']+']' + os.linesep
    if env['VIVADO_PROJECT_MODE']:
        text += 'create_ip_run [get_ips ${ip_name}]'                        + os.linesep
        text += 'launch_runs -job 6 ${ip_name}_synth_1'                     + os.linesep
        text += 'wait_on_run ${ip_name}_synth_1'                            + os.linesep
        text += 'close_project'                                             + os.linesep
    else:
        text += 'synth_ip  [get_ips ${ip_name}]'                            + os.linesep
    text += 'exit'

    out = generate_title(title_text, '#')
    out += text
    out += generate_footer('#')

    #print(out)

    with open(trg_path, 'w') as ofile:
        ofile.write(out)
        
    return None
#---------------------------------------------------------------------
#
#    Generate IP
#
def ip_create(target, source, env):

    src      = source[0]
    trg      = target[0]

    src_path = str(src)
    trg_path = str(trg)
    ip_name  = drop_suffix(trg.name)
    trg_dir  = os.path.join(env['IP_OOC_PATH'], ip_name)
    logfile  = os.path.join(trg_dir, 'create.log')

    print_action('create IP core:            \'' + trg.name + '\'')

    Execute( Delete(trg_dir) )
    Execute( Mkdir(trg_dir) )

    cmd = []
    cmd.append(env['SYNCOM'])
    cmd.append(env['SYNFLAGS'])
    cmd.append('-log ' + logfile)
    cmd.append(' -source ' + os.path.abspath(src_path))
    cmd = ' '.join(cmd)

    if env['VERBOSE']:
        print(cmd)

    rcode = pexec(cmd, trg_dir, exec_env=env['ENV'])

    return rcode

#---------------------------------------------------------------------
#
#    Run OOC IP synthesis
#
def ip_synthesize(target, source, env):

    src      = source[0]
    trg      = target[0]

    src_path = str(src)
    trg_path = str(trg)
    ip_name  = drop_suffix(trg.name)
    trg_dir  = os.path.join(env['IP_OOC_PATH'], ip_name)
    logfile  = os.path.join(trg_dir, 'syn.log')

    print_action('synthesize IP core:        \'' + trg.name + '\'')

    cmd = []
    cmd.append(env['SYNCOM'])
    cmd.append(env['SYNFLAGS'])
    cmd.append('-log ' + logfile)
    cmd.append(' -source ' + os.path.abspath(src_path))
    cmd = ' '.join(cmd)

    if env['VERBOSE']:
        print(cmd)
    rcode = pexec(cmd, trg_dir, exec_env=env['ENV'])

    return rcode

#-------------------------------------------------------------------------------
#
#    Targets
#
def make_trg_nodes(src, src_suffix, trg_suffix, trg_dir, builder):

    s0 = src
    if SCons.Util.is_List(s0):
        s0 = str(s0[0])
        
    src_name = os.path.split(s0)[1]
    trg_name = src_name.replace(src_suffix, trg_suffix)
    trg      = os.path.join(trg_dir, trg_name)
    trg_list = builder(trg, src)
    
    #Depends(trg_list, 'top.scons')
    return trg_list

#---------------------------------------------------------------------
#
#    Processing OOC IP targets
#
def ip_create_scripts(env, src):
    res     = []
    src_sfx = '.'+env['CONFIG_SUFFIX']
    trg_sfx = '-create.'+env['TOOL_SCRIPT_SUFFIX']
    trg_dir = os.path.join(env['IP_OOC_PATH'], env['IP_SCRIPT_DIRNAME'])
    create_dirs([trg_dir])
    builder = env.IpCreateScript
    for i in src:
        res.append(make_trg_nodes(i, src_sfx, trg_sfx, trg_dir, builder))

    return res
#---------------------------------------------------------------------
def ip_syn_scripts(env, src):
    res     = []
    src_sfx = '.'+env['CONFIG_SUFFIX']
    trg_sfx = '-syn.'+env['TOOL_SCRIPT_SUFFIX']
    trg_dir = os.path.join(env['IP_OOC_PATH'], env['IP_SCRIPT_DIRNAME'])
    builder = env.IpSynScript
    for i in src:
        res.append(make_trg_nodes(i, src_sfx, trg_sfx, trg_dir, builder))

    return res
#---------------------------------------------------------------------
def create_ips(env, src):
    res     = []
    src_sfx = '-create.'+env['TOOL_SCRIPT_SUFFIX']
    trg_sfx = '.'+env['IP_CORE_SUFFIX']
    builder = env.IpCreate
    for i in src:
        ip_name = get_ip_name(i, src_sfx)
        trg_dir = os.path.join( env['IP_OOC_PATH'], ip_name, ip_name )
        res.append(make_trg_nodes(i, src_sfx, trg_sfx, trg_dir, builder))

    return res
#---------------------------------------------------------------------
def syn_ips(env, src, deps=None):
    if deps:
        if len(src) != len(deps):
            print_error('E: ip_syn: src count:', len(src), 'must be equal to deps count:', len(deps))
            Exit(2)

        src = list(zip(src, deps))
    else:
        if not SCons.Util.is_List(deps):
            print_error('E: ip_syn: "deps" argument (typically xci IP Core node list) not specified')
            Exit(2)

    res         = []
    script_sfx  = '-syn.'+env['TOOL_SCRIPT_SUFFIX']
    ip_core_sfx = '.' + env['IP_CORE_SUFFIX']
    trg_sfx     = '.'+env['DCP_SUFFIX']
    builder     = env.IpSyn
    for i in src:
        s = i[0]
        d = i[1]

        ip_name = get_ip_name(s, script_sfx)
        trg_dir = os.path.join( env['IP_OOC_PATH'], ip_name, ip_name )
        trg = make_trg_nodes(s + d, script_sfx, trg_sfx, trg_dir, builder)
        res.append(trg)

    return res
#-------------------------------------------------------------------------------

